<?php

/**
 * @file
 * Module file for the Past DB module.
 */

use Drupal\past\PastEventInterface;
use \Drupal\past_db\Entity\PastEvent;

/**
 * Entity URI callback for image style.
 */
function past_event_entity_uri(PastEvent $event) {
  return array(
    'path' => 'admin/reports/past/' . $event->id(),
  );
}

/**
 * Implements hook_entity_info().
 */
function past_db_entity_info() {
  $info['past_event'] = array(
    'label' => t('Past Event'),
    'module' => 'past_db',
    'fieldable' => TRUE,
    'controller class' => 'PastEventController',
    'metadata controller class' => 'PastDBEventMetadataController',
    'views controller class' => 'PastDBEventViewsController',
    'entity class' => 'PastEvent',
    'base table' => 'past_event',
    'uri callback' => 'entity_class_uri',
    'label callback' => 'entity_class_label',
    'access callback' => 'past_db_access',
    'entity keys' => array(
      'id' => 'event_id',
      'bundle' => 'type',
    ),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'bundles' => array(),
    'admin ui' => array(
      'controller class' => 'PastDBEventUIController',
      'path' => 'admin/reports/past',
      'menu wildcard' => '%entity_object',
    ),
  );

  $info['past_event_argument'] = array(
    'label' => t('Past Event Argument'),
    'module' => 'past_db',
    'controller class' => 'PastEventArgumentController',
    'metadata controller class' => 'PastDBEventArgumentMetadataController',
    'entity class' => 'PastEventArgument',
    'base table' => 'past_event_argument',
    'uri callback' => 'entity_class_uri',
    'label callback' => 'entity_class_label',
    'access callback' => 'past_db_access',
    'entity keys' => array(
      'id' => 'argument_id',
    ),
  );

  $info['past_event_data'] = array(
    'label' => t('Past Event Data'),
    'module' => 'past_db',
    'controller class' => 'EntityAPIController',
    'metadata controller class' => 'PastDBEventDataMetadataController',
    'entity class' => 'PastEventData',
    'base table' => 'past_event_data',
    'uri callback' => 'entity_class_uri',
    'label callback' => 'entity_class_label',
    'access callback' => 'past_db_access',
    'entity keys' => array(
      'id' => 'data_id',
    ),
  );

  return $info;
}

/**
 * Menu argument loader; Load a event type by string.
 *
 * @param string $type
 *   The machine-readable name of a event type to load.
 *
 * @return array
 *   A event type array or FALSE if $type does not exist.
 */
function past_event_type_load($type) {
  return past_event_get_types($type);
}

/**
 * Creates past event type entity.
 *
 * @param string $type
 *   Event type.
 * @param string $label
 *   Event type label.
 * @param array $values
 *   Additional event type values.
 *
 * @return PastEventType
 */
function past_event_type_create($type, $label, $values = array()) {
  $values['id'] = $type;
  $values['label'] = $label;
  return entity_create('past_event_type', $values);
}

/**
 * Gets an array of all past event types, keyed by the type name.
 *
 * @param string $type_name
 *   If set, the type with the given name is returned.
 *
 * @return PastEventType[]
 *   Depending whether $type isset, an array of past event types or a single one.
 */
function past_event_get_types($type_name = NULL) {
  $properties = array();
  if (!empty($type_name)) {
    $properties['id'] = $type_name;
  }
  $types = entity_load_multiple_by_properties('past_event_type', $properties);
  return isset($type_name) ? reset($types) : $types;
}

/**
 * Access callback for the entity API.
 */
function past_event_type_access($op, $type = NULL, $account = NULL) {
  return user_access('administer past', $account);
}

/**
 * Access callback implementation.
 *
 * @param $op
 *   The performed operation - view, delete, create, update, customs...
 * @param $entity
 *   (optional) The entity on which $operation should be performed.
 * @param $account
 *   (optional) The account to check if it has access.
 *
 * @return boolean
 *    TRUE if $account can perform $operation on $entity
 */
function past_db_access($op, $entity = NULL, $account = NULL) {
  return user_access('administer past', $account);
}

/**
 * Implements hook_cron().
 */
function past_db_cron() {
  // Check if expiration is enabled.
  if ($expire = \Drupal::config('past_settings')->get('events_expire', 0)) {
    // Fetch up to 100 past events to delete, delete oldest first.
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'past_event');
    $query->propertyCondition('timestamp', REQUEST_TIME - $expire, '<');
    $query->propertyOrderBy('timestamp');
    $query->range(0, 100);
    $result = $query->execute();
    if ($result) {
      entity_delete_multiple('past_event', array_keys($result['past_event']));
    }
  }
}

/**
 * Implements views arguments details.
 *
 * defined in PastDBEventUIController::hook_menu().
 */
function past_db_event_view($event) {
  return entity_view($event->entityType(), array($event), 'full', NULL, TRUE);
}

/**
 * Implements hook_views_api().
 */
function past_db_views_api() {
  return array(
    'api' => 3,
    'template path' => drupal_get_path('module', 'past_db') . '/themes',
  );
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Display a view as a table style.
 */
function past_db_preprocess_views_view_table(&$vars) {
  // Do this only for the Past views that have a severity field.
  if (empty($vars['view']->field['severity'])) {
    return;
  }
  $vars['attributes']['class'][] = 'past-severity-colors';
  past_db_add_row_colors($vars);
}

/**
 * Adds severity classes to rows.
 *
 * This works only if the field past_event_severity is added to the view.
 *
 * @param array $vars
 *   The variables array as passed into the theme function.
 */
function past_db_add_row_colors(&$vars) {
  // Add the corresponding class to the row.
  $class_names = past_db_severity_css_classes_map();
  foreach ($vars['rows'] as $num => $row) {
    if (isset($vars['result'][$num]->_entity->severity->value) && !empty($class_names[$vars['result'][$num]->_entity->severity->value])) {
      $vars['rows'][$num]['attributes']->addClass($class_names[$vars['result'][$num]->_entity->severity->value]);
    }
  }
}

/**
 * Implements hook_views_pre_render().
 */
function past_db_views_pre_render(\Drupal\views\ViewExecutable $view) {
  if (array_key_exists('past_event', $view->getBaseTables())) {
    // Attach severity styling.
    $view->element['#attached']['library'][] = 'past_db/severity';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function past_db_preprocess_views_view_field(&$vars) {
  // @todo Would like to do this earlier than in preprocess hook! Where?
  if ($vars['field']->field_alias == 'past_event_severity') {
    $severities = past_event_severities();
    $vars['output'] = $severities[intval($vars['field']->original_value)];
  }
}

/**
 * Getter for the severity css classes.
 *
 * @return array
 *   The map of severities to css classes.
 */
function past_db_severity_css_classes_map() {
  return array(
    PAST_SEVERITY_DEBUG => 'past-debug',
    PAST_SEVERITY_INFO => 'past-info',
    PAST_SEVERITY_NOTICE => 'past-notice',
    PAST_SEVERITY_WARNING => 'past-warning',
    PAST_SEVERITY_ERROR => 'past-error',
    PAST_SEVERITY_EMERGENCY => 'past-emergency',
    PAST_SEVERITY_ALERT => 'past-alert',
    PAST_SEVERITY_CRITICAL => 'past-critical',
  );
}

/**
 * Implements hook_entity_insert().
 */
function past_db_entity_past_event_type_insert($entity) {
  field_attach_create_bundle('past_event', $entity->type);
}

/**
 * Implements hook_entity_update().
 */
function past_db_entity_past_event_type_update($entity) {
  if ($entity->type != $entity->original->type) {
    field_attach_rename_bundle('past_event', $entity->original->type, $entity->type);
  }
}

/**
 * Implements hook_entity_delete().
 */
function past_db_entity_past_event_type_delete($entity) {
  field_attach_delete_bundle('past_event', $entity->type);
}

/**
 * Implements hook_entity_extra_field_info().
 */
function past_db_entity_extra_field_info() {
  $extra = array();

  foreach (past_event_get_types() as $key => $bundle) {
    $extra['past_event'][$key] = array(
      'display' => array(
        'message' => array(
          'label' => t('Message'),
          'description' => t('The event log message.'),
          'weight' => 0,
        ),
        'module' => array(
          'label' => t('Module'),
          'description' => t('Module which triggered the event.'),
          'weight' => 1,
        ),
        'machine_name' => array(
          'label' => t('Machine name'),
          'description' => t('The event machine name.'),
          'weight' => 2,
        ),
        'timestamp' => array(
          'label' => t('Event time'),
          'description' => t('The time when the event occurred.'),
          'weight' => 3,
        ),
        'user' => array(
          'label' => t('User'),
          'description' => t('The user that triggered the event.'),
          'weight' => 4,
        ),
        'arguments' => array(
          'label' => t('Arguments'),
          'description' => t('The event arguments.'),
          'weight' => 5,
        ),
      ),
    );
  }

  return $extra;
}

/**
 * Returns an event object.
 *
 * @return PastEventInterface
 *   A new Past event instance.
 */
function past_db_create_event(array $options = array()) {
  if (\Drupal::entityManager()->hasDefinition('past_event')) {
    return entity_create('past_event', $options);
  }
}
