<?php

/**
 * @file
 * Module file for the past project.
 */

use Drupal\Core\Logger\RfcLogLevel;
use Drupal\Core\Site\Settings;
use Drupal\Core\Url;
use Drupal\past\PastEventInterface;
use Drupal\past\PastEventNull;

/**
 * Severities correspond to Log message severity from WATCHDOG.
 * @see bootstrap.inc
 */
const PAST_SEVERITY_EMERGENCY = 0;
const PAST_SEVERITY_ALERT = 1;
const PAST_SEVERITY_CRITICAL = 2;
const PAST_SEVERITY_ERROR = 3;
const PAST_SEVERITY_WARNING = 4;
const PAST_SEVERITY_NOTICE = 5;
const PAST_SEVERITY_INFO = 6;
const PAST_SEVERITY_DEBUG = 7;

/**
 * Creates and saves a past event.
 *
 * @param string $module
 *   The name of the module which is logging the event.
 * @param string $machine_name
 *   The machine name of the event.
 * @param string $message
 *   A description of the event.
 * @param array $arguments
 *   An array of arguments to be saved with the event. They array key is used
 *   as the argument key and the value is the argument data.
 * @param array $options
 *   An array of additional options. Any of the following:
 *     - timestamp: Override the timestamp, defaults to REQUEST_TIME
 *     - severity: One of PAST_SEVERITY_DEBUG, PAST_SEVERITY_INFO,
 *         PAST_SEVERITY_WARNING and PAST_SEVERITY_ERROR.
 *     - uid: Drupal user id.
 *
 * @return PastEventInterface
 *   The event created.
 *
 * @see past_event_create()
 */
function past_event_save($module, $machine_name, $message, array $arguments = array(), array $options = array()) {
  $event = past_event_create($module, $machine_name, $message, $options);

  foreach ($arguments as $key => $argument) {
    $event->addArgument($key, $argument);
  }
  $event->save();
  return $event;
}

/**
 * Creates a past event.
 *
 * @param string $module
 *   The name of the module which is logging the event.
 * @param string $machine_name
 *   The machine name of the event.
 * @param string $message
 *   A description of the event.
 * @param array $options
 *   An array of additional options. Any of the following:
 *     - timestamp: Override the timestamp, defaults to REQUEST_TIME
 *     - severity: One of PAST_SEVERITY_DEBUG, PAST_SEVERITY_INFO,
 *         PAST_SEVERITY_WARNING and PAST_SEVERITY_ERROR.
 *     - uid: Drupal user id.
 *     - session_id: Session ID.
 *
 * @return PastEventInterface
 *   The event created.
 *
 * @see past_event_save()
 */
function past_event_create($module, $machine_name, $message = NULL, array $options = array()) {
  /** @var string $backend_factory */
  $backend_factory = Settings::get('past_backend', 'past_db_create_event');
  if (function_exists($backend_factory)) {
    $event = $backend_factory($options);
  }
  if (empty($event)) {
    // Misconfigured backend. This is covered by requirements hook; do not log.
    return new PastEventNull();
  }

  /* @var $event PastEventInterface */
  $event->setModule($module);
  $event->setMachineName($machine_name);
  if ($message) {
    $event->setMessage($message);
  }

  // @todo move to PastEventController->create() or move other defaults here ?
  if (\Drupal::config('past.settings')->get('log_session_id') &&
    !array_key_exists('session_id', $options)) {
    // Add session id if not in options.
    $user = \Drupal::currentUser();
    if ($user->getSecureSessionId()) {
      // HTTPS Session.
      $event->setSessionId($user->getSecureSessionId());
    }
    elseif ($user->getSessionId()) {
      $event->setSessionId($user->getSessionId());
    }
    else {
      $event->setSessionId(session_id());
    }
  }
  // Compile the full URI from protocol, host, port, uri.
  if (isset($_SERVER['HTTP_HOST']) && isset($_SERVER['REQUEST_URI'])) {
    $https = isset($_SERVER['HTTPS']) ? TRUE : FALSE;
    $location = 'http' . ($https ? 's' : '') . '://';
    $location .= $_SERVER['HTTP_HOST'];
    if (isset($_SERVER['SERVER_PORT'])) {
      if (($https && $_SERVER['SERVER_PORT'] != 443)
        || ($_SERVER['SERVER_PORT'] != 80)) {
        $location .= ':' . $_SERVER['SERVER_PORT'];
      }
    }
    $location .= $_SERVER['REQUEST_URI'];
    $event->setLocation($location);
  }
  if (isset($_SERVER['HTTP_REFERER'])) {
    $event->setReferer($_SERVER['HTTP_REFERER']);
  }

  foreach ($options as $key => $value) {
    switch ($key) {
      case 'timestamp':
        $event->setTimestamp($value);
        break;

      case 'severity':
        $event->setSeverity($value);
        break;

      case 'uid':
        $event->setUid($value);
        break;

      case 'session_id':
        $event->setSessionId($value);
        break;
    }
  }
  return $event;
}

/**
 * Returns an array of past event severities.
 *
 * @return array
 *   The severities of Past events. Keys are severity codes, values are
 *   readable names.
 */
function past_event_severities() {
  return array(
    PAST_SEVERITY_DEBUG => t('Debug'),
    PAST_SEVERITY_INFO => t('Info'),
    PAST_SEVERITY_NOTICE => t('Notice'),
    PAST_SEVERITY_WARNING => t('Warning'),
    PAST_SEVERITY_ERROR => t('Error'),
    PAST_SEVERITY_EMERGENCY => t('Emergency'),
    PAST_SEVERITY_ALERT => t('Alert'),
    PAST_SEVERITY_CRITICAL => t('Critical'),
  );
}

/**
 * Implements hook_form_alter().
 * ??????
 */
function past_form_system_logging_settings_alter(&$form, &$form_state) {
  $form['past_info']['#prefix'] = t('See also <a href="!settings_url">past settings</a>',
    array('!settings_url' => Url::fromRoute('past.settings')->toString()));
  return $form;
}

/**
 * Provides the default enabled watchdog severities to include in backtrace.
 *
 * @return array
 *   Keys are Watchdog severity levels, values are unset.
 */
function _past_watchdog_severity_defaults() {
  return drupal_map_assoc(array(
    'WATCHDOG_SEVERITY_' . RfcLogLevel::EMERGENCY,
    'WATCHDOG_SEVERITY_' . RfcLogLevel::ALERT,
    'WATCHDOG_SEVERITY_' . RfcLogLevel::CRITICAL,
    'WATCHDOG_SEVERITY_' . RfcLogLevel::ERROR,
    'WATCHDOG_SEVERITY_' . RfcLogLevel::NOTICE,
  ));
}

/**
 * Ported format_backtrace from D8 and customized.
 *
 * @param string $severity_level
 *   The name of a Watchdog severity level.
 * @param int $slice
 *   How many entries to skip. Default is 5, because those will always be the
 *   same.
 *
 * @return string
 *   Plain-text backtrace.
 */
function _past_get_formatted_backtrace($severity_level, $slice = 5) {
  $config = \Drupal::config('past.settings');
  $log_backtrace = $config->get('backtrace_include');
  $severity_keyvalue = 'WATCHDOG_SEVERITY_' . $severity_level;
  if (!is_null($severity_level) && empty($log_backtrace[$severity_keyvalue])) {
    return NULL;
  }

  // Skip the given entries (by default 5), as they'll always be the same.
  $backtrace = array_slice(debug_backtrace(), $slice);
  $return = '';
  $i = 0;
  foreach ($backtrace as $trace) {
    $call = array(
      'function' => '',
      'args' => array(),
    );
    if (isset($trace['class'])) {
      $call['function'] = $trace['class'] . $trace['type'] . $trace['function'];
    }
    elseif (isset($trace['function'])) {
      $call['function'] = $trace['function'];
    }
    else {
      $call['function'] = 'main';
    }
    if (isset($trace['function'])) {
      $call['args'][] = isset($trace['line']) ? $trace['line'] : 0;
      $call['args'][] = $trace['function'];
      $call['function'] = isset($trace['file']) ? $trace['file'] : '';
    }
    else {
      foreach ($trace['args'] as $arg) {
        if (is_scalar($arg)) {
          $call['args'][] = is_string($arg) ? '\'' . filter_xss($arg) . '\'' : $arg;
        }
        else {
          $call['args'][] = ucfirst(gettype($arg));
        }
      }
    }
    $return .= '#' . $i . ' ' . $call['function'] . ' (' . implode(', ', $call['args']) . ")\n";
    $i++;
  }
  return $return;
}

/**
 * Prepare a watchdog error array for use as event argument.
 *
 * @param array $error
 *   The error to process.
 *
 * @return array
 *   The prepared argument array.
 */
function _past_error_array_to_event($error) {
  // Make the output of the exception nicer (remove special chars).
  if (isset($error['%type']) && isset($error['%function']) && isset($error['%file']) && isset($error['%line']) && isset($error['severity_level'])) {
    $context = array();
    $context['type'] = $error['%type'];
    $context['function'] = $error['%function'];
    $context['file_line'] = $error['%file'] . ':' . $error['%line'];
    $context['severity_level'] = $error['severity_level'];
    return $context;
  }
  else {
    return NULL;
  }
}

/**
 * Past custom shutdown function.
 *
 * Attempts to deal with error types which error handler is not able to capture.
 */
function _past_shutdown_function() {

  $error_types = array(
    E_ERROR,
    E_WARNING,
    E_CORE_ERROR,
    E_CORE_WARNING,
    E_COMPILE_ERROR,
    E_COMPILE_WARNING,
  );

  // Check if an error was thrown and it's one that can only be captured by a
  // shutdown function.
  if (!($error = error_get_last()) || !in_array($error['type'], $error_types)) {
    return;
  }

  $severity = PAST_SEVERITY_CRITICAL;

  // Create a event, add the error information.
  $event = past_event_create('past', 'fatal_error', $error['message']);
  $event->setSeverity($severity);
  $event->setTimestamp(REQUEST_TIME);

  $event->addArgument('error', $error);

  try {
    $event->save();
  }
  catch (Exception $exception) {
    // If for some reason the saving fails here, log to the apache error log.
    error_log('Failed to save past event with message ' . $error['message'] . ' in past shutdown handler.');
  }
}
